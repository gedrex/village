#!../../bin/python3

import ruamel.yaml as yaml

def consolidation_of_resources_file(resources_file):
    #Opens the file with resources and read all resources and it's attributes to var
    with open(resources_file) as stream:
        try:
            yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)

    with open(resources_file, 'r') as stream:
        resources_in_file = yaml.safe_load(stream)

    resources = resources_in_file['Resources']
    attributes = resources_in_file['Attributes']

    # Check if all attributes are present with resources. 
    ## If not then add them to resources with a value of Null
    attrs_for_deletion = []
    for resource in resources:
        for key, val in resource.items():
            for attribute in attributes:
                if attribute not in val.keys():
                    resource[key][attribute]='Null'
                for k in val.keys():
                    if (k not in attributes) & (k not in attrs_for_deletion):
                        attrs_for_deletion.append(k)
   
    ## If there is attribute in resources what is not in Attributes
    #    this attribute is removed from all resources
    if len(attrs_for_deletion) > 0:
        for resource in resources:
            for attr in attrs_for_deletion:
                for key,value in resource.items():
                    if attr in value.keys():
                        del value[attr]
                    
    # Write new resources to resource yaml file
    newyaml = {'Resources': resources, 'Attributes': attributes}
    with open(resources_file, 'w') as resfile:
        yaml.dump(newyaml, resfile, default_flow_style=False)

consolidation_of_resources_file('resources.yaml')


